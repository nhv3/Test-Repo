/**Startup Template Adapted by Atmel ASF example platform. This code is a template foundation for a simple BLE event procedures
that include connect, disconnect, GATT Server creation, read and write operations. This code is developed for the SAMB11 platform and can work 
with generic BLE platforms that have custom code imported on them to achieve the needed operations. 

Revision: 12
Date 12/20/16 

Vitale, Azin

/**
 * \mainpage
 * \section preface Preface
 * This is the reference manual for the Startup Template
 */
/*- Includes ---------------------------------------------------------------*/
#include <asf.h>
#include "platform.h"
#include "at_ble_api.h"
#include "console_serial.h"
#include <conf_console_serial.h>
#include "timer_hw.h"
#include "ble_manager.h"
#include "ble_utils.h"
#include "button.h"
#include "startup_template_app.h"



/*Semi Static Initializations*/
at_ble_status_t status = AT_BLE_FAILURE;
at_ble_addr_t set_addr={AT_BLE_ADDRESS_PUBLIC,{0x7F, 0x7F, 0x6A, 0x11, 0x75, 0x13}};
uint8_t programming_data[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
static uint8_t params[100];
static at_ble_handle_t service;
static at_ble_err_status_t error_handle;
struct uart_module uart_instance;

/*Quick defines for Print Operations to Debug Window */
#define PRINT(...)                  printf(__VA_ARGS__)
#define PRINT_H1(...)               printf("[APP]>> "/**/__VA_ARGS__)
#define PRINT_H2(...)               printf("\t>> "/**/__VA_ARGS__)
#define PRINT_H3(...)               printf("\t\t>> "/**/__VA_ARGS__)



static at_ble_status_t start_advertisement(void)
{
	/* Set the adv channel with a mapping parameter, set the interval time for adv broadcast */
	at_ble_adv_channel_map_t chann = AT_BLE_ADV_CHNL_37_EN;
	uint16_t interval_time = 160*10;

	/*Check if it was successful*/
	if(at_ble_set_adv_channel_Map(chann) == AT_BLE_SUCCESS) 
	{
		DBG_LOG("Set Channel to 37 ---- Success!");
	}
	else 
	{
		DBG_LOG("Channel could not be set... Revert to 3 Channel Broadcast");
	}

	
	/*Start ADV and check its status. Return the right error handle if failed */
	if(at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, interval_time, 0, 0) == AT_BLE_SUCCESS)
	{
		DBG_LOG("BLE Started Advertisement");
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("BLE Advertisement start Failed");
		return AT_BLE_FAILURE;
	}

}


/* Callback functions */

/* Callback registered for AT_BLE_PAIR_DONE event from stack */
static at_ble_status_t ble_paired_app_event(void *param)
{
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event from stack */
static at_ble_status_t ble_disconnected_app_event(void *param)
{
	DBG_LOG("Device has been disconnected from the Master Control Host");
	ALL_UNUSED(param);
	start_advertisement();
	release_sleep_lock();
	
	return AT_BLE_SUCCESS;	
}

/* Callback registered for AT_BLE_NOTIFICATION_CONFIRMED event from stack */
static at_ble_status_t ble_notification_confirmed_app_event(void *param)
{
	at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)param;
	if(!notification_status->status)
	{
		DBG_LOG_DEV("Notification sent successfully");
		return AT_BLE_SUCCESS;
	}
	return AT_BLE_FAILURE;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_CHANGED event from stack */
static at_ble_status_t ble_char_changed_app_event(void *param)
{
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}

 static at_ble_status_t ble_connected_state_handle(void *param)
{
	ALL_UNUSED(param);
	DBG_LOG("Custom Handle Called----- We are connected from HOST PC!");
	return AT_BLE_SUCCESS;
}
static const ble_event_callback_t startup_template_app_gap_cb[GAP_HANDLE_FUNC_MAX] = {
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	ble_connected_state_handle,
	ble_disconnected_app_event,
	NULL,
	NULL,
	ble_paired_app_event,
	NULL,
	NULL,
	NULL,
	NULL,
	ble_paired_app_event,
	NULL,
	NULL,
	NULL,
	NULL
};

static const ble_event_callback_t startup_template_app_gatt_server_cb[GATT_SERVER_HANDLER_FUNC_MAX] = {
	ble_notification_confirmed_app_event,
	NULL,
	ble_char_changed_app_event,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL
};

/* Register Primary/Included service in case of GATT Server */
	static at_ble_uuid_t service_uuid={AT_BLE_UUID_128,{0xf7, 0xed, 0xf0, 0x2b, 0xcb, 0xed, 0x4b ,0x15, 0x88, 0xe6, 0x75, 0x75, 0xed, 0xab,0x98, 0x80}};
	static at_ble_characteristic_t chars[]={
	{
		0, /* handle stored here */
		{
			AT_BLE_UUID_128, {0xf7, 0xed, 0xf0, 0x2b, 0xcb, 0xed, 0x4b ,0x15, 0x88, 0xe6, 0x75, 0x75, 0xed, 0xab,0x98, 0x80}
			}, /* UUID */
			AT_BLE_CHAR_READ | AT_BLE_CHAR_WRITE | AT_BLE_CHAR_NOTIFY, /* Properties */
			programming_data
			, sizeof(programming_data), 92, /* value */
			AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR, /* permissions */

			NULL, 0, 0, /* user defined name */
			AT_BLE_ATTR_NO_PERMISSIONS, AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR, AT_BLE_ATTR_NO_PERMISSIONS, 0,0,0, /* Handles */
			NULL /* presentation format */
		}
	};


/* timer callback function */
static void timer_callback_fn(void)
{
	/* Add timer callback functionality here */
}

static void button_cb(void)
{
	/* Add button callback functionality here */
}
static void configure_uart(void)
{
	struct uart_config config_uart;

	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);

	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = 115200;
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
}

static void resume_cb(void)
{
	init_port_list();
	configure_uart();
}



int main(void)
{
	uint8_t temp_gatt_update[91]={0};
	platform_driver_init();
	

	/* Initialize serial console */
	serial_console_init();
	
	/* Hardware timer */
	hw_timer_init();
	
	/* button initialization */
	gpio_init();
	button_init();
	button_register_callback(button_cb);
	hw_timer_register_callback(timer_callback_fn);
	register_resume_callback(resume_cb);
	DBG_LOG("Initializing BLE Application");
		/* initialize the BLE chip  and Set the Device Address */
		ble_device_init(&set_addr); // we NEED This fucntion to set GATT DB, otherwise, need to set it manually. Defualt is max size 512 bytes
		/* set the advertisement data */
		ble_advertisement_data_set();
		/* Start the advertisement */
		start_advertisement();
	/* Register callbacks for gap related events */
	//ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
	//BLE_GAP_EVENT_TYPE,
	//startup_template_app_gap_cb);
	
	/* Register callbacks for gatt server related events */
	//ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
	//BLE_GATT_SERVER_EVENT_TYPE,
	//startup_template_app_gatt_server_cb);


	if(at_ble_primary_service_define(&service_uuid,&service,NULL,0,&chars,1) == AT_BLE_SUCCESS){;
		DBG_LOG("WE MADE IT");
	}
	
	else{
		DBG_LOG("ANOTHER BUG");
		at_ble_status_t error = at_ble_primary_service_define(&service_uuid,&service,NULL,0,&chars,1);
		DBG_LOG("%d",error);
	}
	

    release_sleep_lock();
	DBG_LOG("HERE1");
	at_ble_events_t event;


	uint8_t ble_event_params[BLE_EVENT_PARAM_MAX_SIZE];
	while((status = at_ble_event_get(&event, ble_event_params, (uint32_t)-1)) == AT_BLE_SUCCESS)
	{
	acquire_sleep_lock();
	ALL_UNUSED(ble_event_params);
	switch(event){
	case AT_BLE_CONNECTED:
	{
		volatile at_ble_connected_t *conn_params = (at_ble_connected_t *)((void *)ble_event_params);
		PRINT_H1("AT_BLE_CONNECTED:\r\n");
		if (AT_BLE_SUCCESS == conn_params->conn_status)
		{
			PRINT_H2("Device connected:\r\n");
			PRINT_H3("Conn. handle : 0x%04X\r\n", conn_params->handle);
			PRINT_H3("Address      : 0x%02X%02X%02X%02X%02X%02X\r\n",
			conn_params->peer_addr.addr[5],
			conn_params->peer_addr.addr[4],
			conn_params->peer_addr.addr[3],
			conn_params->peer_addr.addr[2],
			conn_params->peer_addr.addr[1],
			conn_params->peer_addr.addr[0]
			);
			PRINT_H3("Conn.Interval: 0x%04X\r\n", conn_params->conn_params.con_interval);
			PRINT_H3("Conn. Latency: 0x%04X\r\n", conn_params->conn_params.con_latency);
			PRINT_H3("Supr. Timeout: 0x%04X\r\n", conn_params->conn_params.sup_to);
		}
		else
		{
			PRINT_H2("Unable to connect to device:\r\n");
			PRINT_H3("Status : %d\r\n", conn_params->conn_status);
		}
	}
	break;
	case AT_BLE_DISCONNECTED:
	{
	DBG_LOG("Disconnected");
		at_ble_disconnected_t *disconn_params = (at_ble_disconnected_t *)((void *)params);
		PRINT_H1("AT_BLE_DISCONNECTED:\r\n");
		PRINT_H2("Device disconnected:\r\n");
		PRINT_H3("Conn. handle : 0x%04X\r\n", disconn_params->handle);
		PRINT_H3("Reason       : 0x%02X\r\n", disconn_params->reason);
		PRINT_H2("Start Advertising again\r\n");

		//print the newly updated gatt server if disconnected
		at_ble_characteristic_value_get(chars->char_val_handle,&temp_gatt_update,92);
		for(int i=0; i<=91;i++){
		printf("0x%02X  ",temp_gatt_update[i]);
		}

		at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, 1600, 0, 0);
	}
	break;

	case AT_BLE_CHARACTERISTIC_CHANGED:
	at_ble_indication_send(0,chars->char_val_handle);
	PRINT_H1("Notification Recieved\r\n");
	break;
	
	default:
	PRINT_H1("default: %d",event);
	break;
	}
	release_sleep_lock();
	
}
}